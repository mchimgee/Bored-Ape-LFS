// source: messages-osmosis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function(){ return this }).call(null);

var types_pb = require('./types_pb.js');
goog.object.extend(proto, types_pb);
goog.exportSymbol('proto.OsmosisAddress', null, global);
goog.exportSymbol('proto.OsmosisGetAddress', null, global);
goog.exportSymbol('proto.OsmosisMsgAck', null, global);
goog.exportSymbol('proto.OsmosisMsgClaim', null, global);
goog.exportSymbol('proto.OsmosisMsgDelegate', null, global);
goog.exportSymbol('proto.OsmosisMsgFarmTokens', null, global);
goog.exportSymbol('proto.OsmosisMsgIBCDeposit', null, global);
goog.exportSymbol('proto.OsmosisMsgIBCWithdrawal', null, global);
goog.exportSymbol('proto.OsmosisMsgLPAdd', null, global);
goog.exportSymbol('proto.OsmosisMsgLPRemove', null, global);
goog.exportSymbol('proto.OsmosisMsgRequest', null, global);
goog.exportSymbol('proto.OsmosisMsgSend', null, global);
goog.exportSymbol('proto.OsmosisMsgSwap', null, global);
goog.exportSymbol('proto.OsmosisMsgUndelegate', null, global);
goog.exportSymbol('proto.OsmosisSignTx', null, global);
goog.exportSymbol('proto.OsmosisSignedTx', null, global);
goog.exportSymbol('proto.OsmosisTimeoutHeight', null, global);
goog.exportSymbol('proto.OsmosisToken', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisGetAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OsmosisGetAddress.repeatedFields_, null);
};
goog.inherits(proto.OsmosisGetAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisGetAddress.displayName = 'proto.OsmosisGetAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisAddress.displayName = 'proto.OsmosisAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisToken.displayName = 'proto.OsmosisToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisTimeoutHeight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisTimeoutHeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisTimeoutHeight.displayName = 'proto.OsmosisTimeoutHeight';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisSignTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OsmosisSignTx.repeatedFields_, null);
};
goog.inherits(proto.OsmosisSignTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisSignTx.displayName = 'proto.OsmosisSignTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgRequest.displayName = 'proto.OsmosisMsgRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgAck.displayName = 'proto.OsmosisMsgAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgSend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgSend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgSend.displayName = 'proto.OsmosisMsgSend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgDelegate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgDelegate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgDelegate.displayName = 'proto.OsmosisMsgDelegate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgUndelegate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgUndelegate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgUndelegate.displayName = 'proto.OsmosisMsgUndelegate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgClaim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgClaim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgClaim.displayName = 'proto.OsmosisMsgClaim';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgLPAdd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgLPAdd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgLPAdd.displayName = 'proto.OsmosisMsgLPAdd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgLPRemove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgLPRemove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgLPRemove.displayName = 'proto.OsmosisMsgLPRemove';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgFarmTokens = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgFarmTokens, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgFarmTokens.displayName = 'proto.OsmosisMsgFarmTokens';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgIBCDeposit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgIBCDeposit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgIBCDeposit.displayName = 'proto.OsmosisMsgIBCDeposit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgIBCWithdrawal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgIBCWithdrawal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgIBCWithdrawal.displayName = 'proto.OsmosisMsgIBCWithdrawal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgSwap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgSwap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgSwap.displayName = 'proto.OsmosisMsgSwap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisSignedTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisSignedTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisSignedTx.displayName = 'proto.OsmosisSignedTx';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OsmosisGetAddress.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisGetAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisGetAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisGetAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisGetAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    showDisplay: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    testnet: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisGetAddress}
 */
proto.OsmosisGetAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisGetAddress;
  return proto.OsmosisGetAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisGetAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisGetAddress}
 */
proto.OsmosisGetAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAddressN(values[i]);
      }
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowDisplay(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisGetAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisGetAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisGetAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisGetAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressNList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated uint32 address_n = 1;
 * @return {!Array<number>}
 */
proto.OsmosisGetAddress.prototype.getAddressNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.setAddressNList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.addAddressN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.clearAddressNList = function() {
  return this.setAddressNList([]);
};


/**
 * optional bool show_display = 2;
 * @return {boolean}
 */
proto.OsmosisGetAddress.prototype.getShowDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.setShowDisplay = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.clearShowDisplay = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisGetAddress.prototype.hasShowDisplay = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool testnet = 3;
 * @return {boolean}
 */
proto.OsmosisGetAddress.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.setTestnet = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.clearTestnet = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisGetAddress.prototype.hasTestnet = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisAddress}
 */
proto.OsmosisAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisAddress;
  return proto.OsmosisAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisAddress}
 */
proto.OsmosisAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.OsmosisAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisAddress} returns this
 */
proto.OsmosisAddress.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisAddress} returns this
 */
proto.OsmosisAddress.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisAddress.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisToken.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    amount: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisToken}
 */
proto.OsmosisToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisToken;
  return proto.OsmosisToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisToken}
 */
proto.OsmosisToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.OsmosisToken.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisToken} returns this
 */
proto.OsmosisToken.prototype.setDenom = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisToken} returns this
 */
proto.OsmosisToken.prototype.clearDenom = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisToken.prototype.hasDenom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 amount = 2;
 * @return {string}
 */
proto.OsmosisToken.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisToken} returns this
 */
proto.OsmosisToken.prototype.setAmount = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisToken} returns this
 */
proto.OsmosisToken.prototype.clearAmount = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisToken.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisTimeoutHeight.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisTimeoutHeight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisTimeoutHeight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisTimeoutHeight.toObject = function(includeInstance, msg) {
  var f, obj = {
    revisionNumber: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    revisionHeight: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisTimeoutHeight}
 */
proto.OsmosisTimeoutHeight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisTimeoutHeight;
  return proto.OsmosisTimeoutHeight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisTimeoutHeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisTimeoutHeight}
 */
proto.OsmosisTimeoutHeight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRevisionNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRevisionHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisTimeoutHeight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisTimeoutHeight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisTimeoutHeight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisTimeoutHeight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 revision_number = 1;
 * @return {number}
 */
proto.OsmosisTimeoutHeight.prototype.getRevisionNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.OsmosisTimeoutHeight} returns this
 */
proto.OsmosisTimeoutHeight.prototype.setRevisionNumber = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisTimeoutHeight} returns this
 */
proto.OsmosisTimeoutHeight.prototype.clearRevisionNumber = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisTimeoutHeight.prototype.hasRevisionNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 revision_height = 2;
 * @return {number}
 */
proto.OsmosisTimeoutHeight.prototype.getRevisionHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.OsmosisTimeoutHeight} returns this
 */
proto.OsmosisTimeoutHeight.prototype.setRevisionHeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisTimeoutHeight} returns this
 */
proto.OsmosisTimeoutHeight.prototype.clearRevisionHeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisTimeoutHeight.prototype.hasRevisionHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OsmosisSignTx.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisSignTx.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisSignTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisSignTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisSignTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    accountNumber: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    chainId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    feeAmount: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    gas: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    memo: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    sequence: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    msgCount: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    testnet: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisSignTx}
 */
proto.OsmosisSignTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisSignTx;
  return proto.OsmosisSignTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisSignTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisSignTx}
 */
proto.OsmosisSignTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAddressN(values[i]);
      }
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAccountNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFeeAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGas(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSequence(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgCount(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisSignTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisSignTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisSignTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisSignTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressNList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64String(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * repeated uint32 address_n = 1;
 * @return {!Array<number>}
 */
proto.OsmosisSignTx.prototype.getAddressNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setAddressNList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.addAddressN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearAddressNList = function() {
  return this.setAddressNList([]);
};


/**
 * optional uint64 account_number = 2;
 * @return {string}
 */
proto.OsmosisSignTx.prototype.getAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setAccountNumber = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearAccountNumber = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasAccountNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string chain_id = 3;
 * @return {string}
 */
proto.OsmosisSignTx.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setChainId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearChainId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasChainId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 fee_amount = 4;
 * @return {number}
 */
proto.OsmosisSignTx.prototype.getFeeAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setFeeAmount = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearFeeAmount = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasFeeAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 gas = 5;
 * @return {number}
 */
proto.OsmosisSignTx.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setGas = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearGas = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasGas = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string memo = 6;
 * @return {string}
 */
proto.OsmosisSignTx.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setMemo = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearMemo = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasMemo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 sequence = 7;
 * @return {string}
 */
proto.OsmosisSignTx.prototype.getSequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setSequence = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearSequence = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 msg_count = 8;
 * @return {number}
 */
proto.OsmosisSignTx.prototype.getMsgCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setMsgCount = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearMsgCount = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasMsgCount = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool testnet = 9;
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setTestnet = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearTestnet = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasTestnet = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgRequest}
 */
proto.OsmosisMsgRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgRequest;
  return proto.OsmosisMsgRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgRequest}
 */
proto.OsmosisMsgRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgAck.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    send: (f = msg.getSend()) && proto.OsmosisMsgSend.toObject(includeInstance, f),
    delegate: (f = msg.getDelegate()) && proto.OsmosisMsgDelegate.toObject(includeInstance, f),
    undelegate: (f = msg.getUndelegate()) && proto.OsmosisMsgUndelegate.toObject(includeInstance, f),
    claim: (f = msg.getClaim()) && proto.OsmosisMsgClaim.toObject(includeInstance, f),
    lpAdd: (f = msg.getLpAdd()) && proto.OsmosisMsgLPAdd.toObject(includeInstance, f),
    lpRemove: (f = msg.getLpRemove()) && proto.OsmosisMsgLPRemove.toObject(includeInstance, f),
    farmTokens: (f = msg.getFarmTokens()) && proto.OsmosisMsgFarmTokens.toObject(includeInstance, f),
    ibcDeposit: (f = msg.getIbcDeposit()) && proto.OsmosisMsgIBCDeposit.toObject(includeInstance, f),
    ibcWithdrawal: (f = msg.getIbcWithdrawal()) && proto.OsmosisMsgIBCWithdrawal.toObject(includeInstance, f),
    swap: (f = msg.getSwap()) && proto.OsmosisMsgSwap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgAck}
 */
proto.OsmosisMsgAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgAck;
  return proto.OsmosisMsgAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgAck}
 */
proto.OsmosisMsgAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.OsmosisMsgSend;
      reader.readMessage(value,proto.OsmosisMsgSend.deserializeBinaryFromReader);
      msg.setSend(value);
      break;
    case 2:
      var value = new proto.OsmosisMsgDelegate;
      reader.readMessage(value,proto.OsmosisMsgDelegate.deserializeBinaryFromReader);
      msg.setDelegate(value);
      break;
    case 3:
      var value = new proto.OsmosisMsgUndelegate;
      reader.readMessage(value,proto.OsmosisMsgUndelegate.deserializeBinaryFromReader);
      msg.setUndelegate(value);
      break;
    case 4:
      var value = new proto.OsmosisMsgClaim;
      reader.readMessage(value,proto.OsmosisMsgClaim.deserializeBinaryFromReader);
      msg.setClaim(value);
      break;
    case 5:
      var value = new proto.OsmosisMsgLPAdd;
      reader.readMessage(value,proto.OsmosisMsgLPAdd.deserializeBinaryFromReader);
      msg.setLpAdd(value);
      break;
    case 6:
      var value = new proto.OsmosisMsgLPRemove;
      reader.readMessage(value,proto.OsmosisMsgLPRemove.deserializeBinaryFromReader);
      msg.setLpRemove(value);
      break;
    case 7:
      var value = new proto.OsmosisMsgFarmTokens;
      reader.readMessage(value,proto.OsmosisMsgFarmTokens.deserializeBinaryFromReader);
      msg.setFarmTokens(value);
      break;
    case 8:
      var value = new proto.OsmosisMsgIBCDeposit;
      reader.readMessage(value,proto.OsmosisMsgIBCDeposit.deserializeBinaryFromReader);
      msg.setIbcDeposit(value);
      break;
    case 9:
      var value = new proto.OsmosisMsgIBCWithdrawal;
      reader.readMessage(value,proto.OsmosisMsgIBCWithdrawal.deserializeBinaryFromReader);
      msg.setIbcWithdrawal(value);
      break;
    case 10:
      var value = new proto.OsmosisMsgSwap;
      reader.readMessage(value,proto.OsmosisMsgSwap.deserializeBinaryFromReader);
      msg.setSwap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.OsmosisMsgSend.serializeBinaryToWriter
    );
  }
  f = message.getDelegate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.OsmosisMsgDelegate.serializeBinaryToWriter
    );
  }
  f = message.getUndelegate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OsmosisMsgUndelegate.serializeBinaryToWriter
    );
  }
  f = message.getClaim();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.OsmosisMsgClaim.serializeBinaryToWriter
    );
  }
  f = message.getLpAdd();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.OsmosisMsgLPAdd.serializeBinaryToWriter
    );
  }
  f = message.getLpRemove();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.OsmosisMsgLPRemove.serializeBinaryToWriter
    );
  }
  f = message.getFarmTokens();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.OsmosisMsgFarmTokens.serializeBinaryToWriter
    );
  }
  f = message.getIbcDeposit();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.OsmosisMsgIBCDeposit.serializeBinaryToWriter
    );
  }
  f = message.getIbcWithdrawal();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.OsmosisMsgIBCWithdrawal.serializeBinaryToWriter
    );
  }
  f = message.getSwap();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.OsmosisMsgSwap.serializeBinaryToWriter
    );
  }
};


/**
 * optional OsmosisMsgSend send = 1;
 * @return {?proto.OsmosisMsgSend}
 */
proto.OsmosisMsgAck.prototype.getSend = function() {
  return /** @type{?proto.OsmosisMsgSend} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgSend, 1));
};


/**
 * @param {?proto.OsmosisMsgSend|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setSend = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearSend = function() {
  return this.setSend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasSend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OsmosisMsgDelegate delegate = 2;
 * @return {?proto.OsmosisMsgDelegate}
 */
proto.OsmosisMsgAck.prototype.getDelegate = function() {
  return /** @type{?proto.OsmosisMsgDelegate} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgDelegate, 2));
};


/**
 * @param {?proto.OsmosisMsgDelegate|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setDelegate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearDelegate = function() {
  return this.setDelegate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasDelegate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OsmosisMsgUndelegate undelegate = 3;
 * @return {?proto.OsmosisMsgUndelegate}
 */
proto.OsmosisMsgAck.prototype.getUndelegate = function() {
  return /** @type{?proto.OsmosisMsgUndelegate} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgUndelegate, 3));
};


/**
 * @param {?proto.OsmosisMsgUndelegate|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setUndelegate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearUndelegate = function() {
  return this.setUndelegate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasUndelegate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OsmosisMsgClaim claim = 4;
 * @return {?proto.OsmosisMsgClaim}
 */
proto.OsmosisMsgAck.prototype.getClaim = function() {
  return /** @type{?proto.OsmosisMsgClaim} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgClaim, 4));
};


/**
 * @param {?proto.OsmosisMsgClaim|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setClaim = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearClaim = function() {
  return this.setClaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasClaim = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OsmosisMsgLPAdd lp_add = 5;
 * @return {?proto.OsmosisMsgLPAdd}
 */
proto.OsmosisMsgAck.prototype.getLpAdd = function() {
  return /** @type{?proto.OsmosisMsgLPAdd} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgLPAdd, 5));
};


/**
 * @param {?proto.OsmosisMsgLPAdd|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setLpAdd = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearLpAdd = function() {
  return this.setLpAdd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasLpAdd = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OsmosisMsgLPRemove lp_remove = 6;
 * @return {?proto.OsmosisMsgLPRemove}
 */
proto.OsmosisMsgAck.prototype.getLpRemove = function() {
  return /** @type{?proto.OsmosisMsgLPRemove} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgLPRemove, 6));
};


/**
 * @param {?proto.OsmosisMsgLPRemove|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setLpRemove = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearLpRemove = function() {
  return this.setLpRemove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasLpRemove = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OsmosisMsgFarmTokens farm_tokens = 7;
 * @return {?proto.OsmosisMsgFarmTokens}
 */
proto.OsmosisMsgAck.prototype.getFarmTokens = function() {
  return /** @type{?proto.OsmosisMsgFarmTokens} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgFarmTokens, 7));
};


/**
 * @param {?proto.OsmosisMsgFarmTokens|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setFarmTokens = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearFarmTokens = function() {
  return this.setFarmTokens(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasFarmTokens = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OsmosisMsgIBCDeposit ibc_deposit = 8;
 * @return {?proto.OsmosisMsgIBCDeposit}
 */
proto.OsmosisMsgAck.prototype.getIbcDeposit = function() {
  return /** @type{?proto.OsmosisMsgIBCDeposit} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgIBCDeposit, 8));
};


/**
 * @param {?proto.OsmosisMsgIBCDeposit|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setIbcDeposit = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearIbcDeposit = function() {
  return this.setIbcDeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasIbcDeposit = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OsmosisMsgIBCWithdrawal ibc_withdrawal = 9;
 * @return {?proto.OsmosisMsgIBCWithdrawal}
 */
proto.OsmosisMsgAck.prototype.getIbcWithdrawal = function() {
  return /** @type{?proto.OsmosisMsgIBCWithdrawal} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgIBCWithdrawal, 9));
};


/**
 * @param {?proto.OsmosisMsgIBCWithdrawal|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setIbcWithdrawal = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearIbcWithdrawal = function() {
  return this.setIbcWithdrawal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasIbcWithdrawal = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional OsmosisMsgSwap swap = 10;
 * @return {?proto.OsmosisMsgSwap}
 */
proto.OsmosisMsgAck.prototype.getSwap = function() {
  return /** @type{?proto.OsmosisMsgSwap} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgSwap, 10));
};


/**
 * @param {?proto.OsmosisMsgSwap|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setSwap = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearSwap = function() {
  return this.setSwap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasSwap = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgSend.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgSend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgSend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgSend.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromAddress: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    toAddress: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    token: (f = msg.getToken()) && proto.OsmosisToken.toObject(includeInstance, f),
    addressType: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgSend}
 */
proto.OsmosisMsgSend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgSend;
  return proto.OsmosisMsgSend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgSend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgSend}
 */
proto.OsmosisMsgSend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAddress(value);
      break;
    case 3:
      var value = new proto.OsmosisToken;
      reader.readMessage(value,proto.OsmosisToken.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 4:
      var value = /** @type {!proto.OutputAddressType} */ (reader.readEnum());
      msg.setAddressType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgSend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgSend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgSend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgSend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OsmosisToken.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.OutputAddressType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string from_address = 1;
 * @return {string}
 */
proto.OsmosisMsgSend.prototype.getFromAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.setFromAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.clearFromAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSend.prototype.hasFromAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string to_address = 2;
 * @return {string}
 */
proto.OsmosisMsgSend.prototype.getToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.setToAddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.clearToAddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSend.prototype.hasToAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OsmosisToken token = 3;
 * @return {?proto.OsmosisToken}
 */
proto.OsmosisMsgSend.prototype.getToken = function() {
  return /** @type{?proto.OsmosisToken} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisToken, 3));
};


/**
 * @param {?proto.OsmosisToken|undefined} value
 * @return {!proto.OsmosisMsgSend} returns this
*/
proto.OsmosisMsgSend.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSend.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OutputAddressType address_type = 4;
 * @return {!proto.OutputAddressType}
 */
proto.OsmosisMsgSend.prototype.getAddressType = function() {
  return /** @type {!proto.OutputAddressType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.OutputAddressType} value
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.setAddressType = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.clearAddressType = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSend.prototype.hasAddressType = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgDelegate.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgDelegate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgDelegate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgDelegate.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegatorAddress: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    validatorAddress: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    token: (f = msg.getToken()) && proto.OsmosisToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgDelegate}
 */
proto.OsmosisMsgDelegate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgDelegate;
  return proto.OsmosisMsgDelegate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgDelegate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgDelegate}
 */
proto.OsmosisMsgDelegate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegatorAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorAddress(value);
      break;
    case 3:
      var value = new proto.OsmosisToken;
      reader.readMessage(value,proto.OsmosisToken.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgDelegate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgDelegate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgDelegate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgDelegate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OsmosisToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string delegator_address = 1;
 * @return {string}
 */
proto.OsmosisMsgDelegate.prototype.getDelegatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.setDelegatorAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.clearDelegatorAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgDelegate.prototype.hasDelegatorAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string validator_address = 2;
 * @return {string}
 */
proto.OsmosisMsgDelegate.prototype.getValidatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.setValidatorAddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.clearValidatorAddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgDelegate.prototype.hasValidatorAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OsmosisToken token = 3;
 * @return {?proto.OsmosisToken}
 */
proto.OsmosisMsgDelegate.prototype.getToken = function() {
  return /** @type{?proto.OsmosisToken} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisToken, 3));
};


/**
 * @param {?proto.OsmosisToken|undefined} value
 * @return {!proto.OsmosisMsgDelegate} returns this
*/
proto.OsmosisMsgDelegate.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgDelegate.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgUndelegate.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgUndelegate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgUndelegate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgUndelegate.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegatorAddress: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    validatorAddress: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    token: (f = msg.getToken()) && proto.OsmosisToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgUndelegate}
 */
proto.OsmosisMsgUndelegate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgUndelegate;
  return proto.OsmosisMsgUndelegate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgUndelegate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgUndelegate}
 */
proto.OsmosisMsgUndelegate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegatorAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorAddress(value);
      break;
    case 3:
      var value = new proto.OsmosisToken;
      reader.readMessage(value,proto.OsmosisToken.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgUndelegate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgUndelegate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgUndelegate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgUndelegate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OsmosisToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string delegator_address = 1;
 * @return {string}
 */
proto.OsmosisMsgUndelegate.prototype.getDelegatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.setDelegatorAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.clearDelegatorAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgUndelegate.prototype.hasDelegatorAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string validator_address = 2;
 * @return {string}
 */
proto.OsmosisMsgUndelegate.prototype.getValidatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.setValidatorAddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.clearValidatorAddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgUndelegate.prototype.hasValidatorAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OsmosisToken token = 3;
 * @return {?proto.OsmosisToken}
 */
proto.OsmosisMsgUndelegate.prototype.getToken = function() {
  return /** @type{?proto.OsmosisToken} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisToken, 3));
};


/**
 * @param {?proto.OsmosisToken|undefined} value
 * @return {!proto.OsmosisMsgUndelegate} returns this
*/
proto.OsmosisMsgUndelegate.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgUndelegate.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgClaim.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgClaim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgClaim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgClaim.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegatorAddress: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    validatorAddress: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    token: (f = msg.getToken()) && proto.OsmosisToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgClaim}
 */
proto.OsmosisMsgClaim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgClaim;
  return proto.OsmosisMsgClaim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgClaim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgClaim}
 */
proto.OsmosisMsgClaim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegatorAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorAddress(value);
      break;
    case 3:
      var value = new proto.OsmosisToken;
      reader.readMessage(value,proto.OsmosisToken.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgClaim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgClaim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgClaim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgClaim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OsmosisToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string delegator_address = 1;
 * @return {string}
 */
proto.OsmosisMsgClaim.prototype.getDelegatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgClaim} returns this
 */
proto.OsmosisMsgClaim.prototype.setDelegatorAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgClaim} returns this
 */
proto.OsmosisMsgClaim.prototype.clearDelegatorAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgClaim.prototype.hasDelegatorAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string validator_address = 2;
 * @return {string}
 */
proto.OsmosisMsgClaim.prototype.getValidatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgClaim} returns this
 */
proto.OsmosisMsgClaim.prototype.setValidatorAddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgClaim} returns this
 */
proto.OsmosisMsgClaim.prototype.clearValidatorAddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgClaim.prototype.hasValidatorAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OsmosisToken token = 3;
 * @return {?proto.OsmosisToken}
 */
proto.OsmosisMsgClaim.prototype.getToken = function() {
  return /** @type{?proto.OsmosisToken} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisToken, 3));
};


/**
 * @param {?proto.OsmosisToken|undefined} value
 * @return {!proto.OsmosisMsgClaim} returns this
*/
proto.OsmosisMsgClaim.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgClaim} returns this
 */
proto.OsmosisMsgClaim.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgClaim.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgLPAdd.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgLPAdd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgLPAdd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgLPAdd.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    poolId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    shareOutAmount: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    tokenInMaxA: (f = msg.getTokenInMaxA()) && proto.OsmosisToken.toObject(includeInstance, f),
    tokenInMaxB: (f = msg.getTokenInMaxB()) && proto.OsmosisToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgLPAdd}
 */
proto.OsmosisMsgLPAdd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgLPAdd;
  return proto.OsmosisMsgLPAdd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgLPAdd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgLPAdd}
 */
proto.OsmosisMsgLPAdd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoolId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setShareOutAmount(value);
      break;
    case 4:
      var value = new proto.OsmosisToken;
      reader.readMessage(value,proto.OsmosisToken.deserializeBinaryFromReader);
      msg.setTokenInMaxA(value);
      break;
    case 5:
      var value = new proto.OsmosisToken;
      reader.readMessage(value,proto.OsmosisToken.deserializeBinaryFromReader);
      msg.setTokenInMaxB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgLPAdd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgLPAdd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgLPAdd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgLPAdd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTokenInMaxA();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.OsmosisToken.serializeBinaryToWriter
    );
  }
  f = message.getTokenInMaxB();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.OsmosisToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.OsmosisMsgLPAdd.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.setSender = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.clearSender = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPAdd.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string pool_id = 2;
 * @return {string}
 */
proto.OsmosisMsgLPAdd.prototype.getPoolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.setPoolId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.clearPoolId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPAdd.prototype.hasPoolId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 share_out_amount = 3;
 * @return {number}
 */
proto.OsmosisMsgLPAdd.prototype.getShareOutAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.setShareOutAmount = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.clearShareOutAmount = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPAdd.prototype.hasShareOutAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OsmosisToken token_in_max_a = 4;
 * @return {?proto.OsmosisToken}
 */
proto.OsmosisMsgLPAdd.prototype.getTokenInMaxA = function() {
  return /** @type{?proto.OsmosisToken} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisToken, 4));
};


/**
 * @param {?proto.OsmosisToken|undefined} value
 * @return {!proto.OsmosisMsgLPAdd} returns this
*/
proto.OsmosisMsgLPAdd.prototype.setTokenInMaxA = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.clearTokenInMaxA = function() {
  return this.setTokenInMaxA(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPAdd.prototype.hasTokenInMaxA = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OsmosisToken token_in_max_b = 5;
 * @return {?proto.OsmosisToken}
 */
proto.OsmosisMsgLPAdd.prototype.getTokenInMaxB = function() {
  return /** @type{?proto.OsmosisToken} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisToken, 5));
};


/**
 * @param {?proto.OsmosisToken|undefined} value
 * @return {!proto.OsmosisMsgLPAdd} returns this
*/
proto.OsmosisMsgLPAdd.prototype.setTokenInMaxB = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.clearTokenInMaxB = function() {
  return this.setTokenInMaxB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPAdd.prototype.hasTokenInMaxB = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgLPRemove.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgLPRemove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgLPRemove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgLPRemove.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    poolId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    shareOutAmount: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    tokenOutMinA: (f = msg.getTokenOutMinA()) && proto.OsmosisToken.toObject(includeInstance, f),
    tokenOutMinB: (f = msg.getTokenOutMinB()) && proto.OsmosisToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgLPRemove}
 */
proto.OsmosisMsgLPRemove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgLPRemove;
  return proto.OsmosisMsgLPRemove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgLPRemove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgLPRemove}
 */
proto.OsmosisMsgLPRemove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoolId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setShareOutAmount(value);
      break;
    case 4:
      var value = new proto.OsmosisToken;
      reader.readMessage(value,proto.OsmosisToken.deserializeBinaryFromReader);
      msg.setTokenOutMinA(value);
      break;
    case 5:
      var value = new proto.OsmosisToken;
      reader.readMessage(value,proto.OsmosisToken.deserializeBinaryFromReader);
      msg.setTokenOutMinB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgLPRemove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgLPRemove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgLPRemove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgLPRemove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTokenOutMinA();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.OsmosisToken.serializeBinaryToWriter
    );
  }
  f = message.getTokenOutMinB();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.OsmosisToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.OsmosisMsgLPRemove.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.setSender = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.clearSender = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPRemove.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string pool_id = 2;
 * @return {string}
 */
proto.OsmosisMsgLPRemove.prototype.getPoolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.setPoolId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.clearPoolId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPRemove.prototype.hasPoolId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 share_out_amount = 3;
 * @return {number}
 */
proto.OsmosisMsgLPRemove.prototype.getShareOutAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.setShareOutAmount = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.clearShareOutAmount = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPRemove.prototype.hasShareOutAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OsmosisToken token_out_min_a = 4;
 * @return {?proto.OsmosisToken}
 */
proto.OsmosisMsgLPRemove.prototype.getTokenOutMinA = function() {
  return /** @type{?proto.OsmosisToken} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisToken, 4));
};


/**
 * @param {?proto.OsmosisToken|undefined} value
 * @return {!proto.OsmosisMsgLPRemove} returns this
*/
proto.OsmosisMsgLPRemove.prototype.setTokenOutMinA = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.clearTokenOutMinA = function() {
  return this.setTokenOutMinA(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPRemove.prototype.hasTokenOutMinA = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OsmosisToken token_out_min_b = 5;
 * @return {?proto.OsmosisToken}
 */
proto.OsmosisMsgLPRemove.prototype.getTokenOutMinB = function() {
  return /** @type{?proto.OsmosisToken} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisToken, 5));
};


/**
 * @param {?proto.OsmosisToken|undefined} value
 * @return {!proto.OsmosisMsgLPRemove} returns this
*/
proto.OsmosisMsgLPRemove.prototype.setTokenOutMinB = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.clearTokenOutMinB = function() {
  return this.setTokenOutMinB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPRemove.prototype.hasTokenOutMinB = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgFarmTokens.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgFarmTokens.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgFarmTokens} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgFarmTokens.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    duration: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    token: (f = msg.getToken()) && proto.OsmosisToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgFarmTokens}
 */
proto.OsmosisMsgFarmTokens.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgFarmTokens;
  return proto.OsmosisMsgFarmTokens.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgFarmTokens} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgFarmTokens}
 */
proto.OsmosisMsgFarmTokens.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDuration(value);
      break;
    case 3:
      var value = new proto.OsmosisToken;
      reader.readMessage(value,proto.OsmosisToken.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgFarmTokens.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgFarmTokens.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgFarmTokens} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgFarmTokens.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OsmosisToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string owner = 1;
 * @return {string}
 */
proto.OsmosisMsgFarmTokens.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgFarmTokens} returns this
 */
proto.OsmosisMsgFarmTokens.prototype.setOwner = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgFarmTokens} returns this
 */
proto.OsmosisMsgFarmTokens.prototype.clearOwner = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgFarmTokens.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 duration = 2;
 * @return {number}
 */
proto.OsmosisMsgFarmTokens.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.OsmosisMsgFarmTokens} returns this
 */
proto.OsmosisMsgFarmTokens.prototype.setDuration = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgFarmTokens} returns this
 */
proto.OsmosisMsgFarmTokens.prototype.clearDuration = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgFarmTokens.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OsmosisToken token = 3;
 * @return {?proto.OsmosisToken}
 */
proto.OsmosisMsgFarmTokens.prototype.getToken = function() {
  return /** @type{?proto.OsmosisToken} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisToken, 3));
};


/**
 * @param {?proto.OsmosisToken|undefined} value
 * @return {!proto.OsmosisMsgFarmTokens} returns this
*/
proto.OsmosisMsgFarmTokens.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgFarmTokens} returns this
 */
proto.OsmosisMsgFarmTokens.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgFarmTokens.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgIBCDeposit.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgIBCDeposit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgIBCDeposit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgIBCDeposit.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcePort: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sourceChannel: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    token: (f = msg.getToken()) && proto.OsmosisToken.toObject(includeInstance, f),
    sender: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    receiver: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    timeoutHeight: (f = msg.getTimeoutHeight()) && proto.OsmosisTimeoutHeight.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgIBCDeposit}
 */
proto.OsmosisMsgIBCDeposit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgIBCDeposit;
  return proto.OsmosisMsgIBCDeposit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgIBCDeposit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgIBCDeposit}
 */
proto.OsmosisMsgIBCDeposit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcePort(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceChannel(value);
      break;
    case 3:
      var value = new proto.OsmosisToken;
      reader.readMessage(value,proto.OsmosisToken.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 6:
      var value = new proto.OsmosisTimeoutHeight;
      reader.readMessage(value,proto.OsmosisTimeoutHeight.deserializeBinaryFromReader);
      msg.setTimeoutHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgIBCDeposit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgIBCDeposit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgIBCDeposit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgIBCDeposit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OsmosisToken.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTimeoutHeight();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.OsmosisTimeoutHeight.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source_port = 1;
 * @return {string}
 */
proto.OsmosisMsgIBCDeposit.prototype.getSourcePort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCDeposit} returns this
 */
proto.OsmosisMsgIBCDeposit.prototype.setSourcePort = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCDeposit} returns this
 */
proto.OsmosisMsgIBCDeposit.prototype.clearSourcePort = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCDeposit.prototype.hasSourcePort = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string source_channel = 2;
 * @return {string}
 */
proto.OsmosisMsgIBCDeposit.prototype.getSourceChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCDeposit} returns this
 */
proto.OsmosisMsgIBCDeposit.prototype.setSourceChannel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCDeposit} returns this
 */
proto.OsmosisMsgIBCDeposit.prototype.clearSourceChannel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCDeposit.prototype.hasSourceChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OsmosisToken token = 3;
 * @return {?proto.OsmosisToken}
 */
proto.OsmosisMsgIBCDeposit.prototype.getToken = function() {
  return /** @type{?proto.OsmosisToken} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisToken, 3));
};


/**
 * @param {?proto.OsmosisToken|undefined} value
 * @return {!proto.OsmosisMsgIBCDeposit} returns this
*/
proto.OsmosisMsgIBCDeposit.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgIBCDeposit} returns this
 */
proto.OsmosisMsgIBCDeposit.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCDeposit.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string sender = 4;
 * @return {string}
 */
proto.OsmosisMsgIBCDeposit.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCDeposit} returns this
 */
proto.OsmosisMsgIBCDeposit.prototype.setSender = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCDeposit} returns this
 */
proto.OsmosisMsgIBCDeposit.prototype.clearSender = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCDeposit.prototype.hasSender = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string receiver = 5;
 * @return {string}
 */
proto.OsmosisMsgIBCDeposit.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCDeposit} returns this
 */
proto.OsmosisMsgIBCDeposit.prototype.setReceiver = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCDeposit} returns this
 */
proto.OsmosisMsgIBCDeposit.prototype.clearReceiver = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCDeposit.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OsmosisTimeoutHeight timeout_height = 6;
 * @return {?proto.OsmosisTimeoutHeight}
 */
proto.OsmosisMsgIBCDeposit.prototype.getTimeoutHeight = function() {
  return /** @type{?proto.OsmosisTimeoutHeight} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisTimeoutHeight, 6));
};


/**
 * @param {?proto.OsmosisTimeoutHeight|undefined} value
 * @return {!proto.OsmosisMsgIBCDeposit} returns this
*/
proto.OsmosisMsgIBCDeposit.prototype.setTimeoutHeight = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgIBCDeposit} returns this
 */
proto.OsmosisMsgIBCDeposit.prototype.clearTimeoutHeight = function() {
  return this.setTimeoutHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCDeposit.prototype.hasTimeoutHeight = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgIBCWithdrawal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgIBCWithdrawal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgIBCWithdrawal.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcePort: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sourceChannel: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    token: (f = msg.getToken()) && proto.OsmosisToken.toObject(includeInstance, f),
    sender: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    receiver: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    timeoutHeight: (f = msg.getTimeoutHeight()) && proto.OsmosisTimeoutHeight.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgIBCWithdrawal}
 */
proto.OsmosisMsgIBCWithdrawal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgIBCWithdrawal;
  return proto.OsmosisMsgIBCWithdrawal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgIBCWithdrawal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgIBCWithdrawal}
 */
proto.OsmosisMsgIBCWithdrawal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcePort(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceChannel(value);
      break;
    case 3:
      var value = new proto.OsmosisToken;
      reader.readMessage(value,proto.OsmosisToken.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 6:
      var value = new proto.OsmosisTimeoutHeight;
      reader.readMessage(value,proto.OsmosisTimeoutHeight.deserializeBinaryFromReader);
      msg.setTimeoutHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgIBCWithdrawal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgIBCWithdrawal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgIBCWithdrawal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OsmosisToken.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTimeoutHeight();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.OsmosisTimeoutHeight.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source_port = 1;
 * @return {string}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.getSourcePort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCWithdrawal} returns this
 */
proto.OsmosisMsgIBCWithdrawal.prototype.setSourcePort = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCWithdrawal} returns this
 */
proto.OsmosisMsgIBCWithdrawal.prototype.clearSourcePort = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.hasSourcePort = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string source_channel = 2;
 * @return {string}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.getSourceChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCWithdrawal} returns this
 */
proto.OsmosisMsgIBCWithdrawal.prototype.setSourceChannel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCWithdrawal} returns this
 */
proto.OsmosisMsgIBCWithdrawal.prototype.clearSourceChannel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.hasSourceChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OsmosisToken token = 3;
 * @return {?proto.OsmosisToken}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.getToken = function() {
  return /** @type{?proto.OsmosisToken} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisToken, 3));
};


/**
 * @param {?proto.OsmosisToken|undefined} value
 * @return {!proto.OsmosisMsgIBCWithdrawal} returns this
*/
proto.OsmosisMsgIBCWithdrawal.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgIBCWithdrawal} returns this
 */
proto.OsmosisMsgIBCWithdrawal.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string sender = 4;
 * @return {string}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCWithdrawal} returns this
 */
proto.OsmosisMsgIBCWithdrawal.prototype.setSender = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCWithdrawal} returns this
 */
proto.OsmosisMsgIBCWithdrawal.prototype.clearSender = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.hasSender = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string receiver = 5;
 * @return {string}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCWithdrawal} returns this
 */
proto.OsmosisMsgIBCWithdrawal.prototype.setReceiver = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCWithdrawal} returns this
 */
proto.OsmosisMsgIBCWithdrawal.prototype.clearReceiver = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OsmosisTimeoutHeight timeout_height = 6;
 * @return {?proto.OsmosisTimeoutHeight}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.getTimeoutHeight = function() {
  return /** @type{?proto.OsmosisTimeoutHeight} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisTimeoutHeight, 6));
};


/**
 * @param {?proto.OsmosisTimeoutHeight|undefined} value
 * @return {!proto.OsmosisMsgIBCWithdrawal} returns this
*/
proto.OsmosisMsgIBCWithdrawal.prototype.setTimeoutHeight = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgIBCWithdrawal} returns this
 */
proto.OsmosisMsgIBCWithdrawal.prototype.clearTimeoutHeight = function() {
  return this.setTimeoutHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCWithdrawal.prototype.hasTimeoutHeight = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgSwap.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgSwap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgSwap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgSwap.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    poolId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    tokenOutDenom: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    tokenIn: (f = msg.getTokenIn()) && proto.OsmosisToken.toObject(includeInstance, f),
    tokenOutMinAmount: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgSwap}
 */
proto.OsmosisMsgSwap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgSwap;
  return proto.OsmosisMsgSwap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgSwap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgSwap}
 */
proto.OsmosisMsgSwap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoolId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenOutDenom(value);
      break;
    case 4:
      var value = new proto.OsmosisToken;
      reader.readMessage(value,proto.OsmosisToken.deserializeBinaryFromReader);
      msg.setTokenIn(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTokenOutMinAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgSwap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgSwap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgSwap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgSwap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTokenIn();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.OsmosisToken.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.OsmosisMsgSwap.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.setSender = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.clearSender = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSwap.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string pool_id = 2;
 * @return {string}
 */
proto.OsmosisMsgSwap.prototype.getPoolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.setPoolId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.clearPoolId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSwap.prototype.hasPoolId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string token_out_denom = 3;
 * @return {string}
 */
proto.OsmosisMsgSwap.prototype.getTokenOutDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.setTokenOutDenom = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.clearTokenOutDenom = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSwap.prototype.hasTokenOutDenom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OsmosisToken token_in = 4;
 * @return {?proto.OsmosisToken}
 */
proto.OsmosisMsgSwap.prototype.getTokenIn = function() {
  return /** @type{?proto.OsmosisToken} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisToken, 4));
};


/**
 * @param {?proto.OsmosisToken|undefined} value
 * @return {!proto.OsmosisMsgSwap} returns this
*/
proto.OsmosisMsgSwap.prototype.setTokenIn = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.clearTokenIn = function() {
  return this.setTokenIn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSwap.prototype.hasTokenIn = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 token_out_min_amount = 5;
 * @return {number}
 */
proto.OsmosisMsgSwap.prototype.getTokenOutMinAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.setTokenOutMinAmount = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.clearTokenOutMinAmount = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSwap.prototype.hasTokenOutMinAmount = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisSignedTx.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisSignedTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisSignedTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisSignedTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisSignedTx}
 */
proto.OsmosisSignedTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisSignedTx;
  return proto.OsmosisSignedTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisSignedTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisSignedTx}
 */
proto.OsmosisSignedTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisSignedTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisSignedTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisSignedTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisSignedTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.OsmosisSignedTx.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.OsmosisSignedTx.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.OsmosisSignedTx.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.OsmosisSignedTx} returns this
 */
proto.OsmosisSignedTx.prototype.setPublicKey = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignedTx} returns this
 */
proto.OsmosisSignedTx.prototype.clearPublicKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignedTx.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.OsmosisSignedTx.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.OsmosisSignedTx.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.OsmosisSignedTx.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.OsmosisSignedTx} returns this
 */
proto.OsmosisSignedTx.prototype.setSignature = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignedTx} returns this
 */
proto.OsmosisSignedTx.prototype.clearSignature = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignedTx.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
