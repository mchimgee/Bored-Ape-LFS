// source: exchange.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function(){ return this }).call(null);

goog.exportSymbol('proto.ExchangeAddress', null, global);
goog.exportSymbol('proto.ExchangeResponseV2', null, global);
goog.exportSymbol('proto.OrderType', null, global);
goog.exportSymbol('proto.SignedExchangeResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExchangeAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ExchangeAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ExchangeAddress.displayName = 'proto.ExchangeAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExchangeResponseV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ExchangeResponseV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ExchangeResponseV2.displayName = 'proto.ExchangeResponseV2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignedExchangeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SignedExchangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SignedExchangeResponse.displayName = 'proto.SignedExchangeResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExchangeAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.ExchangeAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExchangeAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    coinType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    address: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    destTag: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExchangeAddress}
 */
proto.ExchangeAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExchangeAddress;
  return proto.ExchangeAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExchangeAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExchangeAddress}
 */
proto.ExchangeAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoinType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExchangeAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExchangeAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExchangeAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string coin_type = 1;
 * @return {string}
 */
proto.ExchangeAddress.prototype.getCoinType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExchangeAddress} returns this
 */
proto.ExchangeAddress.prototype.setCoinType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ExchangeAddress} returns this
 */
proto.ExchangeAddress.prototype.clearCoinType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeAddress.prototype.hasCoinType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.ExchangeAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExchangeAddress} returns this
 */
proto.ExchangeAddress.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ExchangeAddress} returns this
 */
proto.ExchangeAddress.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeAddress.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string dest_tag = 3;
 * @return {string}
 */
proto.ExchangeAddress.prototype.getDestTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExchangeAddress} returns this
 */
proto.ExchangeAddress.prototype.setDestTag = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ExchangeAddress} returns this
 */
proto.ExchangeAddress.prototype.clearDestTag = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeAddress.prototype.hasDestTag = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExchangeResponseV2.prototype.toObject = function(opt_includeInstance) {
  return proto.ExchangeResponseV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExchangeResponseV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeResponseV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    depositAddress: (f = msg.getDepositAddress()) && proto.ExchangeAddress.toObject(includeInstance, f),
    depositAmount: msg.getDepositAmount_asB64(),
    expiration: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    quotedRate: msg.getQuotedRate_asB64(),
    withdrawalAddress: (f = msg.getWithdrawalAddress()) && proto.ExchangeAddress.toObject(includeInstance, f),
    withdrawalAmount: msg.getWithdrawalAmount_asB64(),
    returnAddress: (f = msg.getReturnAddress()) && proto.ExchangeAddress.toObject(includeInstance, f),
    apiKey: msg.getApiKey_asB64(),
    minerFee: msg.getMinerFee_asB64(),
    orderId: msg.getOrderId_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExchangeResponseV2}
 */
proto.ExchangeResponseV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExchangeResponseV2;
  return proto.ExchangeResponseV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExchangeResponseV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExchangeResponseV2}
 */
proto.ExchangeResponseV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ExchangeAddress;
      reader.readMessage(value,proto.ExchangeAddress.deserializeBinaryFromReader);
      msg.setDepositAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDepositAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiration(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setQuotedRate(value);
      break;
    case 5:
      var value = new proto.ExchangeAddress;
      reader.readMessage(value,proto.ExchangeAddress.deserializeBinaryFromReader);
      msg.setWithdrawalAddress(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWithdrawalAmount(value);
      break;
    case 7:
      var value = new proto.ExchangeAddress;
      reader.readMessage(value,proto.ExchangeAddress.deserializeBinaryFromReader);
      msg.setReturnAddress(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setApiKey(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMinerFee(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrderId(value);
      break;
    case 11:
      var value = /** @type {!proto.OrderType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExchangeResponseV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExchangeResponseV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExchangeResponseV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExchangeResponseV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepositAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ExchangeAddress.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getWithdrawalAddress();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ExchangeAddress.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getReturnAddress();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ExchangeAddress.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = /** @type {!proto.OrderType} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeEnum(
      11,
      f
    );
  }
};


/**
 * optional ExchangeAddress deposit_address = 1;
 * @return {?proto.ExchangeAddress}
 */
proto.ExchangeResponseV2.prototype.getDepositAddress = function() {
  return /** @type{?proto.ExchangeAddress} */ (
    jspb.Message.getWrapperField(this, proto.ExchangeAddress, 1));
};


/**
 * @param {?proto.ExchangeAddress|undefined} value
 * @return {!proto.ExchangeResponseV2} returns this
*/
proto.ExchangeResponseV2.prototype.setDepositAddress = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.clearDepositAddress = function() {
  return this.setDepositAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeResponseV2.prototype.hasDepositAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes deposit_amount = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ExchangeResponseV2.prototype.getDepositAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes deposit_amount = 2;
 * This is a type-conversion wrapper around `getDepositAmount()`
 * @return {string}
 */
proto.ExchangeResponseV2.prototype.getDepositAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDepositAmount()));
};


/**
 * optional bytes deposit_amount = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDepositAmount()`
 * @return {!Uint8Array}
 */
proto.ExchangeResponseV2.prototype.getDepositAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDepositAmount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.setDepositAmount = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.clearDepositAmount = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeResponseV2.prototype.hasDepositAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 expiration = 3;
 * @return {number}
 */
proto.ExchangeResponseV2.prototype.getExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.setExpiration = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.clearExpiration = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeResponseV2.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes quoted_rate = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ExchangeResponseV2.prototype.getQuotedRate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes quoted_rate = 4;
 * This is a type-conversion wrapper around `getQuotedRate()`
 * @return {string}
 */
proto.ExchangeResponseV2.prototype.getQuotedRate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getQuotedRate()));
};


/**
 * optional bytes quoted_rate = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQuotedRate()`
 * @return {!Uint8Array}
 */
proto.ExchangeResponseV2.prototype.getQuotedRate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getQuotedRate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.setQuotedRate = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.clearQuotedRate = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeResponseV2.prototype.hasQuotedRate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ExchangeAddress withdrawal_address = 5;
 * @return {?proto.ExchangeAddress}
 */
proto.ExchangeResponseV2.prototype.getWithdrawalAddress = function() {
  return /** @type{?proto.ExchangeAddress} */ (
    jspb.Message.getWrapperField(this, proto.ExchangeAddress, 5));
};


/**
 * @param {?proto.ExchangeAddress|undefined} value
 * @return {!proto.ExchangeResponseV2} returns this
*/
proto.ExchangeResponseV2.prototype.setWithdrawalAddress = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.clearWithdrawalAddress = function() {
  return this.setWithdrawalAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeResponseV2.prototype.hasWithdrawalAddress = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes withdrawal_amount = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ExchangeResponseV2.prototype.getWithdrawalAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes withdrawal_amount = 6;
 * This is a type-conversion wrapper around `getWithdrawalAmount()`
 * @return {string}
 */
proto.ExchangeResponseV2.prototype.getWithdrawalAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWithdrawalAmount()));
};


/**
 * optional bytes withdrawal_amount = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWithdrawalAmount()`
 * @return {!Uint8Array}
 */
proto.ExchangeResponseV2.prototype.getWithdrawalAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWithdrawalAmount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.setWithdrawalAmount = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.clearWithdrawalAmount = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeResponseV2.prototype.hasWithdrawalAmount = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ExchangeAddress return_address = 7;
 * @return {?proto.ExchangeAddress}
 */
proto.ExchangeResponseV2.prototype.getReturnAddress = function() {
  return /** @type{?proto.ExchangeAddress} */ (
    jspb.Message.getWrapperField(this, proto.ExchangeAddress, 7));
};


/**
 * @param {?proto.ExchangeAddress|undefined} value
 * @return {!proto.ExchangeResponseV2} returns this
*/
proto.ExchangeResponseV2.prototype.setReturnAddress = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.clearReturnAddress = function() {
  return this.setReturnAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeResponseV2.prototype.hasReturnAddress = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes api_key = 8;
 * @return {!(string|Uint8Array)}
 */
proto.ExchangeResponseV2.prototype.getApiKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes api_key = 8;
 * This is a type-conversion wrapper around `getApiKey()`
 * @return {string}
 */
proto.ExchangeResponseV2.prototype.getApiKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getApiKey()));
};


/**
 * optional bytes api_key = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getApiKey()`
 * @return {!Uint8Array}
 */
proto.ExchangeResponseV2.prototype.getApiKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getApiKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.setApiKey = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.clearApiKey = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeResponseV2.prototype.hasApiKey = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes miner_fee = 9;
 * @return {!(string|Uint8Array)}
 */
proto.ExchangeResponseV2.prototype.getMinerFee = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes miner_fee = 9;
 * This is a type-conversion wrapper around `getMinerFee()`
 * @return {string}
 */
proto.ExchangeResponseV2.prototype.getMinerFee_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMinerFee()));
};


/**
 * optional bytes miner_fee = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMinerFee()`
 * @return {!Uint8Array}
 */
proto.ExchangeResponseV2.prototype.getMinerFee_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMinerFee()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.setMinerFee = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.clearMinerFee = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeResponseV2.prototype.hasMinerFee = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bytes order_id = 10;
 * @return {!(string|Uint8Array)}
 */
proto.ExchangeResponseV2.prototype.getOrderId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes order_id = 10;
 * This is a type-conversion wrapper around `getOrderId()`
 * @return {string}
 */
proto.ExchangeResponseV2.prototype.getOrderId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrderId()));
};


/**
 * optional bytes order_id = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrderId()`
 * @return {!Uint8Array}
 */
proto.ExchangeResponseV2.prototype.getOrderId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrderId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.setOrderId = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.clearOrderId = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeResponseV2.prototype.hasOrderId = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional OrderType type = 11;
 * @return {!proto.OrderType}
 */
proto.ExchangeResponseV2.prototype.getType = function() {
  return /** @type {!proto.OrderType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.OrderType} value
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.setType = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ExchangeResponseV2} returns this
 */
proto.ExchangeResponseV2.prototype.clearType = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExchangeResponseV2.prototype.hasType = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignedExchangeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SignedExchangeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignedExchangeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignedExchangeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64(),
    responsev2: (f = msg.getResponsev2()) && proto.ExchangeResponseV2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignedExchangeResponse}
 */
proto.SignedExchangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignedExchangeResponse;
  return proto.SignedExchangeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignedExchangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignedExchangeResponse}
 */
proto.SignedExchangeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = new proto.ExchangeResponseV2;
      reader.readMessage(value,proto.ExchangeResponseV2.deserializeBinaryFromReader);
      msg.setResponsev2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignedExchangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignedExchangeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignedExchangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignedExchangeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getResponsev2();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ExchangeResponseV2.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.SignedExchangeResponse.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.SignedExchangeResponse.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.SignedExchangeResponse.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.SignedExchangeResponse} returns this
 */
proto.SignedExchangeResponse.prototype.setSignature = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SignedExchangeResponse} returns this
 */
proto.SignedExchangeResponse.prototype.clearSignature = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SignedExchangeResponse.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ExchangeResponseV2 responseV2 = 3;
 * @return {?proto.ExchangeResponseV2}
 */
proto.SignedExchangeResponse.prototype.getResponsev2 = function() {
  return /** @type{?proto.ExchangeResponseV2} */ (
    jspb.Message.getWrapperField(this, proto.ExchangeResponseV2, 3));
};


/**
 * @param {?proto.ExchangeResponseV2|undefined} value
 * @return {!proto.SignedExchangeResponse} returns this
*/
proto.SignedExchangeResponse.prototype.setResponsev2 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SignedExchangeResponse} returns this
 */
proto.SignedExchangeResponse.prototype.clearResponsev2 = function() {
  return this.setResponsev2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SignedExchangeResponse.prototype.hasResponsev2 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.OrderType = {
  PRECISE: 0,
  QUICK: 1
};

goog.object.extend(exports, proto);
