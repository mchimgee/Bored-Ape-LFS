"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var hash_js_1 = __importDefault(require("hash.js"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
var hdkey_1 = __importDefault(require("hdkey"));
var sdk_1 = __importDefault(require("@cvbb/sdk"));
var ethereumjs_util_1 = require("ethereumjs-util");
var keyringType = 'Air Gaped Device';
var pathBase = 'm';
var MAX_INDEX = 1000;
var readKeyringDescription = function () { return __awaiter(void 0, void 0, void 0, function () {
    var decodedResult, type, result, _a, xfp, xpub, path;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, sdk_1.default.read({
                    title: 'Sync Cobo Vault',
                    description: "Please click 'Sync' in Cobo Vault and scan the QR code displayed later",
                })];
            case 1:
                decodedResult = _b.sent();
                type = decodedResult.type, result = decodedResult.result;
                if (type === 'json') {
                    _a = JSON.parse(result), xfp = _a.xfp, xpub = _a.xpub, path = _a.path;
                    if (xfp && xpub && path) {
                        return [2 /*return*/, {
                                xfp: xfp,
                                xpub: xpub,
                                hdPath: path,
                            }];
                    }
                }
                else if (type === 'none') {
                    throw new Error('Reading canceled');
                }
                throw new Error('Invalid qrcode');
        }
    });
}); };
var AirGapedKeyring = /** @class */ (function (_super) {
    __extends(AirGapedKeyring, _super);
    function AirGapedKeyring(opts) {
        var _this = _super.call(this) || this;
        _this.xfp = '';
        _this.xpub = '';
        _this.hdPath = '';
        _this.page = 0;
        _this.perPage = 5;
        _this.type = keyringType;
        _this.accounts = [];
        _this.currentAccount = 0;
        _this.paths = {};
        _this.latestAccount = 0;
        _this.deserialize(opts);
        return _this;
    }
    AirGapedKeyring.getKeyring = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, xpub, xfp, hdPath;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, readKeyringDescription()];
                    case 1:
                        _a = _b.sent(), xpub = _a.xpub, xfp = _a.xfp, hdPath = _a.hdPath;
                        return [2 /*return*/, new AirGapedKeyring({
                                xfp: xfp,
                                xpub: xpub,
                                hdPath: hdPath,
                                perPage: 5,
                                page: 0,
                                accounts: [],
                                currentAccount: 0,
                                paths: {},
                            })];
                }
            });
        });
    };
    AirGapedKeyring.getEmptyKeyring = function () {
        return new AirGapedKeyring({
            xfp: '',
            xpub: '',
            hdPath: '',
            perPage: 5,
            page: 0,
            accounts: [],
            currentAccount: 0,
            paths: {},
        });
    };
    AirGapedKeyring.prototype.readKeyring = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, xpub, xfp, hdPath;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, readKeyringDescription()];
                    case 1:
                        _a = _b.sent(), xpub = _a.xpub, xfp = _a.xfp, hdPath = _a.hdPath;
                        this.xfp = xfp;
                        this.xpub = xpub;
                        this.hdPath = hdPath;
                        return [2 /*return*/];
                }
            });
        });
    };
    AirGapedKeyring.prototype.checkKeyring = function () {
        if (!this.xfp || !this.xpub || !this.hdPath) {
            throw new Error('keyring not fulfilled, please call function `readKeyring` firstly');
        }
    };
    AirGapedKeyring.prototype.serialize = function () {
        return Promise.resolve({
            xfp: this.xfp,
            xpub: this.xpub,
            hdPath: this.hdPath,
            accounts: this.accounts,
            currentAccount: this.currentAccount,
            page: this.page,
            perPage: this.perPage,
            paths: this.paths,
        });
    };
    AirGapedKeyring.prototype.deserialize = function (opts) {
        this.xfp = opts.xfp;
        this.xpub = opts.xpub;
        this.hdPath = opts.hdPath;
        this.accounts = opts.accounts;
        this.currentAccount = opts.currentAccount;
        this.page = opts.page;
        this.perPage = opts.perPage;
        this.paths = opts.paths;
    };
    AirGapedKeyring.prototype.setCurrentAccount = function (index) {
        this.currentAccount = index;
    };
    AirGapedKeyring.prototype.getCurrentAccount = function () {
        return this.currentAccount;
    };
    AirGapedKeyring.prototype.getCurrentAddress = function () {
        return this.accounts[this.currentAccount];
    };
    AirGapedKeyring.prototype.addAccounts = function (n) {
        var _this = this;
        if (n === void 0) { n = 1; }
        return new Promise(function (resolve, reject) {
            try {
                var from = _this.latestAccount;
                var to = from + n;
                var newAccounts = [];
                for (var i = from; i < to; i++) {
                    var address = _this._addressFromIndex(pathBase, i);
                    newAccounts.push(address);
                    _this.page = 0;
                    _this.latestAccount++;
                }
                _this.accounts = _this.accounts.concat(newAccounts);
                resolve(_this.accounts);
            }
            catch (e) {
                reject(e);
            }
        });
    };
    AirGapedKeyring.prototype.getFirstPage = function () {
        this.page = 0;
        return this.__getPage(1);
    };
    AirGapedKeyring.prototype.getNextPage = function () {
        return this.__getPage(1);
    };
    AirGapedKeyring.prototype.getPreviousPage = function () {
        return this.__getPage(-1);
    };
    AirGapedKeyring.prototype.__getPage = function (increment) {
        var _this = this;
        this.page += increment;
        if (this.page <= 0) {
            this.page = 1;
        }
        return new Promise(function (resolve, reject) {
            try {
                var from = (_this.page - 1) * _this.perPage;
                var to = from + _this.perPage;
                var accounts = [];
                for (var i = from; i < to; i++) {
                    var address = _this._addressFromIndex(pathBase, i);
                    accounts.push({
                        address: address,
                        balance: null,
                        index: i,
                    });
                    _this.paths[ethereumjs_util_1.toChecksumAddress(address)] = i;
                }
                resolve(accounts);
            }
            catch (e) {
                reject(e);
            }
        });
    };
    AirGapedKeyring.prototype.getAccounts = function () {
        return this.accounts;
    };
    AirGapedKeyring.prototype.removeAccount = function (address) {
        if (!this.accounts.map(function (a) { return a.toLowerCase(); }).includes(address.toLowerCase())) {
            throw new Error("Address " + address + " not found in this keyring");
        }
        this.accounts = this.accounts.filter(function (a) { return a.toLowerCase() !== address.toLowerCase(); });
    };
    AirGapedKeyring.prototype.readSignature = function (signId) {
        return __awaiter(this, void 0, void 0, function () {
            var signature, _a, peerSignId, signatureHex, r, s, v;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, sdk_1.default.read({
                            title: 'Submit signing result',
                            description: 'Please scan signing result QR code displayed on your Cobo Vault',
                        })];
                    case 1:
                        signature = _b.sent();
                        if (signature) {
                            if (signature.type === 'ur') {
                                _a = JSON.parse(Buffer.from(signature.result, 'hex').toString('utf-8')), peerSignId = _a.signId, signatureHex = _a.signature;
                                if (peerSignId && signatureHex) {
                                    if (peerSignId !== signId) {
                                        throw new Error('read signature error: mismatched signId');
                                    }
                                    r = Buffer.from(signatureHex.slice(0, 64), 'hex');
                                    s = Buffer.from(signatureHex.slice(64, 128), 'hex');
                                    v = Buffer.from(signatureHex.slice(128), 'hex');
                                    return [2 /*return*/, {
                                            r: r,
                                            s: s,
                                            v: v,
                                        }];
                                }
                                throw new Error('invalid signature qrcode');
                            }
                            else {
                                throw new Error('invalid signature qrcode');
                            }
                        }
                        throw new Error('read signature canceled');
                }
            });
        });
    };
    // tx is an instance of the ethereumjs-transaction class.
    AirGapedKeyring.serializeTx = function (tx) {
        var items = __spreadArray(__spreadArray([], tx.raw.slice(0, 6)), [
            ethereumjs_util_1.toBuffer(tx.getChainId()),
            // TODO: stripping zeros should probably be a responsibility of the rlp module
            ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)),
            ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)),
        ]);
        return ethereumjs_util_1.rlp.encode(items);
    };
    AirGapedKeyring.prototype.signTransaction = function (address, tx) {
        return __awaiter(this, void 0, void 0, function () {
            var txHex, hdPath, signId, signPayload, _a, r, s, v;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        txHex = AirGapedKeyring.serializeTx(tx).toString('hex');
                        hdPath = this._pathFromAddress(address);
                        signId = hash_js_1.default.sha256().update("" + txHex + hdPath + this.xfp).digest('hex').slice(0, 8);
                        signPayload = {
                            txHex: txHex,
                            xfp: this.xfp,
                            hdPath: hdPath,
                            signId: signId,
                        };
                        return [4 /*yield*/, sdk_1.default.play(Buffer.from(JSON.stringify(signPayload), 'utf-8').toString('hex'), {
                                hasNext: true,
                                title: 'Request signing transaction',
                                description: 'Please scan the QR code below with Cobo Vault, review transaction information and authorize to sign',
                            })];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.readSignature(signId)];
                    case 2:
                        _a = _b.sent(), r = _a.r, s = _a.s, v = _a.v;
                        tx.r = r;
                        tx.s = s;
                        tx.v = v;
                        return [2 /*return*/, tx];
                }
            });
        });
    };
    AirGapedKeyring.prototype.signMessage = function (withAccount, data) {
        return this.signPersonalMessage(withAccount, data);
    };
    AirGapedKeyring.prototype.signPersonalMessage = function (withAccount, messageHex) {
        return __awaiter(this, void 0, void 0, function () {
            var hdPath, signId, signPayload, _a, r, s, v;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        hdPath = this._pathFromAddress(withAccount);
                        signId = hash_js_1.default.sha256().update("" + messageHex + hdPath + this.xfp).digest('hex').slice(0, 8);
                        signPayload = {
                            messageHex: messageHex,
                            xfp: this.xfp,
                            hdPath: hdPath,
                            signId: signId,
                        };
                        return [4 /*yield*/, sdk_1.default.play(Buffer.from(JSON.stringify(signPayload), 'utf-8').toString('hex'), {
                                hasNext: true,
                                title: 'Request signing message',
                                description: 'Please scan the QR code below with Cobo Vault, review message and authorize to sign',
                            })];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.readSignature(signId)];
                    case 2:
                        _a = _b.sent(), r = _a.r, s = _a.s, v = _a.v;
                        return [2 /*return*/, '0x' + r + s + v];
                }
            });
        });
    };
    AirGapedKeyring.prototype.signTypedData = function (withAccount, typedData) {
        return __awaiter(this, void 0, void 0, function () {
            var hdPath, signId, signPayload, _a, r, s, v;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        hdPath = this._pathFromAddress(withAccount);
                        signId = hash_js_1.default
                            .sha256()
                            .update("" + JSON.stringify(typedData) + hdPath + this.xfp)
                            .digest('hex')
                            .slice(0, 8);
                        signPayload = {
                            data: typedData,
                            xfp: this.xfp,
                            hdPath: hdPath,
                            signId: signId,
                        };
                        return [4 /*yield*/, sdk_1.default.play(Buffer.from(JSON.stringify(signPayload), 'utf-8').toString('hex'), {
                                hasNext: true,
                                title: 'Request signing typed data',
                                description: 'Please scan the QR code below with Cobo Vault, review data and authorize to sign',
                            })];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.readSignature(signId)];
                    case 2:
                        _a = _b.sent(), r = _a.r, s = _a.s, v = _a.v;
                        return [2 /*return*/, Buffer.concat([r, s, v])];
                }
            });
        });
    };
    AirGapedKeyring.prototype._addressFromIndex = function (pb, i) {
        this.checkKeyring();
        if (!this.hdk) {
            this.hdk = hdkey_1.default.fromExtendedKey(this.xpub);
        }
        var dkey = this.hdk.derive(pb + "/0/" + i);
        var address = '0x' + ethereumjs_util_1.publicToAddress(dkey.publicKey, true).toString('hex');
        return ethereumjs_util_1.toChecksumAddress(address);
    };
    AirGapedKeyring.prototype._pathFromAddress = function (address) {
        var checksummedAddress = ethereumjs_util_1.toChecksumAddress(address);
        var index = this.paths[checksummedAddress];
        if (typeof index === 'undefined') {
            for (var i = 0; i < MAX_INDEX; i++) {
                if (checksummedAddress === this._addressFromIndex(pathBase, i)) {
                    index = i;
                    break;
                }
            }
        }
        if (typeof index === 'undefined') {
            throw new Error('Unknown address');
        }
        return this.hdPath + "/0/" + index;
    };
    AirGapedKeyring.type = keyringType;
    return AirGapedKeyring;
}(events_1.EventEmitter));
exports.default = AirGapedKeyring;
//# sourceMappingURL=index.js.map