"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAnimatedQRCodeReader = void 0;
const react_1 = __importStar(require("react"));
const react_qr_reader_1 = __importDefault(require("react-qr-reader"));
const bc_ur_1 = require("@cvbb/bc-ur");
const events_1 = require("events");
const Button_1 = require("../components/Button");
const Progress_1 = require("../components/Progress");
const ButtonGroup_1 = require("../components/ButtonGroup");
const useAnimatedQRCodeReader = () => {
    const [urCodes, setURCodes] = react_1.useState([]);
    const [error, setError] = react_1.useState('');
    const ee = react_1.useMemo(() => new events_1.EventEmitter(), []);
    const [title, setTitle] = react_1.useState(null);
    const [description, setDescription] = react_1.useState(null);
    const reset = () => {
        setURCodes([]);
        setError('');
    };
    const processQRCode = (qr) => {
        try {
            processJSON(qr);
        }
        catch (e1) {
            try {
                processUR(qr);
            }
            catch (e2) {
                processText(qr);
            }
        }
    };
    const handleStop = () => {
        ee.emit('read', {
            type: 'none',
            result: '',
        });
    };
    const handleRetry = () => {
        reset();
    };
    const processJSON = (data) => {
        JSON.parse(data);
        ee.emit('read', {
            type: 'json',
            result: data,
        });
    };
    const processText = (data) => {
        ee.emit('read', {
            type: 'text',
            result: data,
        });
    };
    const processUR = (ur) => {
        try {
            const [index, total] = bc_ur_1.extractSingleWorkload(ur);
            if (urCodes.length > 0) {
                const currentTotal = urCodes[0].total;
                if (total !== currentTotal) {
                    setError('invalid animated qrcode: mismatching qrs, please retry');
                }
            }
            if (!urCodes.find((item) => item.index === index)) {
                const newCodes = [...urCodes, { index, total, data: ur }];
                setURCodes(newCodes);
                if (newCodes.length === total) {
                    const result = bc_ur_1.decodeUR(newCodes.map((item) => item.data));
                    ee.emit('read', {
                        type: 'ur',
                        result,
                    });
                }
            }
        }
        catch (e) {
            setError(e.message);
        }
    };
    const element = (react_1.default.createElement("div", { style: {
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
        } },
        title && react_1.default.createElement("p", null, title),
        description && react_1.default.createElement("p", null, description),
        react_1.default.createElement(react_qr_reader_1.default, { onScan: (data) => {
                if (data) {
                    processQRCode(data);
                }
            }, delay: 100, style: { width: '100%' }, onError: (e) => {
                setError(e.message);
            } }),
        react_1.default.createElement("p", null, urCodes[0] && urCodes[0].total > 1 && react_1.default.createElement(Progress_1.Progress, { progress: urCodes.length, total: urCodes[0].total })),
        react_1.default.createElement(ButtonGroup_1.ButtonGroup, null,
            react_1.default.createElement(Button_1.Button, { onClick: handleStop }, "Close"),
            error && react_1.default.createElement(Button_1.Button, { onClick: handleRetry }, "Retry")),
        error && react_1.default.createElement("p", { style: { color: 'red' } }, error)));
    return [
        element,
        {
            read: (options) => {
                return new Promise((resolve) => {
                    console.log(options);
                    if (options) {
                        options.title && setTitle(options.title);
                        options.description && setDescription(options.description);
                    }
                    ee.once('read', (result) => {
                        reset();
                        resolve(result);
                    });
                });
            },
        },
    ];
};
exports.useAnimatedQRCodeReader = useAnimatedQRCodeReader;
//# sourceMappingURL=useAnimatedQRCodeReader.js.map