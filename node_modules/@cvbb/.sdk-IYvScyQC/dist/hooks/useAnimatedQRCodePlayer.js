"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAnimatedQRCodePlayer = void 0;
const react_1 = __importStar(require("react"));
const rxjs_1 = require("rxjs");
const BaseQRCode_1 = require("../components/BaseQRCode");
const bc_ur_1 = require("@cvbb/bc-ur");
const events_1 = require("events");
const Button_1 = require("../components/Button");
const ButtonGroup_1 = require("../components/ButtonGroup");
const useAnimatedQRCodePlayer = () => {
    const [data, setData] = react_1.useState([]);
    const [refreshSpeed, setRefreshSpeed] = react_1.useState(500);
    const [hasNext, setHasNext] = react_1.useState(false);
    const [index, setIndex] = react_1.useState(0);
    const [title, setTitle] = react_1.useState(null);
    const [description, setDescription] = react_1.useState(null);
    const [isPause, setPause] = react_1.useState(false);
    const pause = () => {
        setPause(true);
    };
    const play = () => {
        setPause(false);
    };
    const next = () => {
        setIndex((index) => {
            if (index >= splitArray.length - 1) {
                return 0;
            }
            else {
                return index + 1;
            }
        });
    };
    const prev = () => {
        setIndex((index) => {
            if (index < 0) {
                return splitArray.length - 1;
            }
            else {
                return index - 1;
            }
        });
    };
    const ee = react_1.useMemo(() => new events_1.EventEmitter(), []);
    const splitArray = data;
    const reset = () => {
        setData([]);
        setRefreshSpeed(500);
        setIndex(0);
    };
    react_1.useEffect(() => {
        if (!isPause) {
            const subscribe = rxjs_1.interval(refreshSpeed).subscribe(() => {
                next();
            });
            return () => {
                subscribe.unsubscribe();
            };
        }
    }, [refreshSpeed, splitArray, isPause]);
    const finish = () => {
        ee.emit('finish', true);
    };
    const element = (react_1.default.createElement("div", { style: {
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
        } },
        title && react_1.default.createElement("p", null, title),
        description && react_1.default.createElement("p", null, description),
        react_1.default.createElement(BaseQRCode_1.BaseQRCode, { size: 288, data: splitArray[index] }),
        react_1.default.createElement("p", { style: { textAlign: 'center' } },
            index + 1,
            "/",
            splitArray.length),
        react_1.default.createElement(ButtonGroup_1.ButtonGroup, null,
            isPause ? react_1.default.createElement(Button_1.Button, { onClick: play }, "Play") : react_1.default.createElement(Button_1.Button, { onClick: pause }, "Pause"),
            react_1.default.createElement(Button_1.Button, { onClick: next }, "Next"),
            react_1.default.createElement(Button_1.Button, { onClick: prev }, "Prev")),
        react_1.default.createElement(ButtonGroup_1.ButtonGroup, null,
            react_1.default.createElement(Button_1.Button, { onClick: finish }, hasNext ? 'Next' : 'Finish'))));
    return [
        element,
        {
            play: (data, options) => {
                return new Promise((resolve) => {
                    const urs = bc_ur_1.encodeUR(data, 800);
                    setData(urs);
                    if (options) {
                        options.refreshSpeed && setRefreshSpeed(options.refreshSpeed);
                        options.hasNext && setHasNext(options.hasNext);
                        options.title && setTitle(options.title);
                        options.description && setDescription(options.description);
                    }
                    ee.once('finish', () => {
                        reset();
                        resolve();
                    });
                });
            },
        },
    ];
};
exports.useAnimatedQRCodePlayer = useAnimatedQRCodePlayer;
//# sourceMappingURL=useAnimatedQRCodePlayer.js.map