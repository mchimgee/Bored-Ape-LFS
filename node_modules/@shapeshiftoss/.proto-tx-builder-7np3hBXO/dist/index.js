"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sign = void 0;
var proto_signing_1 = require("@cosmjs/proto-signing");
var stargate_1 = require("@cosmjs/stargate");
var utils_1 = require("@cosmjs/stargate/build/queryclient/utils");
var tx_1 = require("cosmjs-types/cosmos/tx/v1beta1/tx");
var codecs = __importStar(require("./protobuf"));
function sign(jsonTx, signer, sequence, accountNumber, chainId) {
    return __awaiter(this, void 0, void 0, function () {
        var myRegistry, clientOffline, convertedMsg, msg, from, fee, memo, txRaw, encoded, output;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    myRegistry = new proto_signing_1.Registry(stargate_1.defaultRegistryTypes);
                    console.log("proto-tx-builder.sign seq: ".concat(sequence, ", acctNum: ").concat(accountNumber, ", chainId: ").concat(chainId));
                    // custom osmosis modules
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgSwapExactAmountIn', codecs.osmosis.gamm.v1beta1.MsgSwapExactAmountIn);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgSwapExactAmountOut', codecs.osmosis.gamm.v1beta1.MsgSwapExactAmountOut);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgJoinPool', codecs.osmosis.gamm.v1beta1.MsgJoinPool);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgExitPool', codecs.osmosis.gamm.v1beta1.MsgExitPool);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgCreatePool', codecs.osmosis.gamm.v1beta1.MsgCreatePool);
                    myRegistry.register('/osmosis.gamm.v1beta1.PoolParams', codecs.osmosis.gamm.v1beta1.PoolParams);
                    myRegistry.register('/osmosis.gamm.v1beta1.PoolAsset', codecs.osmosis.gamm.v1beta1.PoolAsset);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn', codecs.osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgExitSwapExternAmountOut', codecs.osmosis.gamm.v1beta1.MsgExitSwapExternAmountOut);
                    myRegistry.register('/osmosis.gamm.v1beta1.SwapAmountInRoute', codecs.osmosis.gamm.v1beta1.SwapAmountInRoute);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn', codecs.osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn);
                    // staking
                    myRegistry.register('/osmosis.lockup.MsgLockTokens', codecs.osmosis.lockup.MsgLockTokens);
                    myRegistry.register('/osmosis.lockup.MsgBeginUnlocking', codecs.osmosis.lockup.MsgBeginUnlocking);
                    myRegistry.register('/osmosis.lockup.MsgBeginUnlockingAll', codecs.osmosis.lockup.MsgBeginUnlockingAll);
                    // thorchain
                    myRegistry.register('/types.MsgSend', codecs.thorchain_types.MsgSend);
                    myRegistry.register('/types.MsgDeposit', codecs.thorchain_types.MsgDeposit);
                    return [4 /*yield*/, stargate_1.SigningStargateClient.offline(signer, {
                            registry: myRegistry
                        })];
                case 1:
                    clientOffline = _a.sent();
                    convertedMsg = parse_legacy_tx_format(jsonTx);
                    msg = convertedMsg.msg, from = convertedMsg.from, fee = convertedMsg.fee, memo = convertedMsg.memo;
                    if (!fee) {
                        throw new Error('fee must be defined after conversion');
                    }
                    return [4 /*yield*/, clientOffline.sign(from, [msg], fee, memo || '', {
                            accountNumber: Number(accountNumber),
                            sequence: Number(sequence),
                            chainId: chainId
                        })
                        // console.log('signedTx: ', JSON.stringify(txRaw))
                    ];
                case 2:
                    txRaw = _a.sent();
                    encoded = tx_1.TxRaw.encode(txRaw).finish();
                    output = {
                        serialized: Buffer.from(encoded).toString('base64'),
                        body: Buffer.from(txRaw.bodyBytes).toString('base64'),
                        authInfoBytes: Buffer.from(txRaw.authInfoBytes).toString('base64'),
                        signatures: txRaw.signatures.map(function (x) { return Buffer.from(x).toString('base64'); })
                    };
                    // console.log('output: ', JSON.stringify(output))
                    return [2 /*return*/, output];
            }
        });
    });
}
exports.sign = sign;
var scrubCoin = function (x) {
    if (!x.amount)
        throw new Error('missing coin amount');
    if (!x.denom)
        throw new Error('missing coin denom');
    return (0, proto_signing_1.coin)(x.amount, x.denom);
};
var scrubCoins = function (x) { return x.filter(function (c) { return c.amount && c.amount !== "0"; }).map(scrubCoin); };
var scrubRoute = function (x) {
    if (!x.poolId)
        throw new Error('missing route poolId');
    if (!x.tokenOutDenom)
        throw new Error('missing route tokenOutDenom');
    return {
        poolId: x.poolId,
        tokenOutDenom: x.tokenOutDenom
    };
};
var scrubRoutes = function (x) { return x.map(scrubRoute); };
function parse_legacy_tx_format(jsonTx) {
    if (jsonTx.msg.length !== 1)
        throw new Error('multiple msgs not supported!');
    return __assign(__assign({}, convertLegacyMsg(jsonTx.msg[0])), { fee: {
            amount: scrubCoins(jsonTx.fee.amount),
            gas: jsonTx.fee.gas
        }, memo: jsonTx.memo });
}
function convertLegacyMsg(msg) {
    var _a, _b;
    var _c, _d;
    // switch for each tx type supported
    switch (msg.type) {
        case 'thorchain/MsgSend':
            if (!msg.value.from_address)
                throw new Error('Missing from_address in msg');
            if (!msg.value.to_address)
                throw new Error('Missing to_address in msg');
            return {
                from: msg.value.from_address,
                msg: {
                    typeUrl: '/types.MsgSend',
                    value: {
                        fromAddress: (0, utils_1.toAccAddress)(msg.value.from_address),
                        toAddress: (0, utils_1.toAccAddress)(msg.value.to_address),
                        amount: scrubCoins(msg.value.amount)
                    }
                },
            };
        case 'thorchain/MsgDeposit':
            if (((_c = msg.value.coins) === null || _c === void 0 ? void 0 : _c.length) !== 1) {
                throw new Error("expected 1 input coin got ".concat((_d = msg.value.coins) === null || _d === void 0 ? void 0 : _d.length));
            }
            // console.info('MsgDeposit IN: ', JSON.stringify(msg))
            var inCoin = msg.value.coins[0];
            var parts = inCoin.asset.split(".");
            if (parts.length < 1) {
                throw new Error("expected 1 or 2 parts to asset got ".concat(parts.length));
            }
            var chain;
            var symbol;
            if (parts.length > 1) {
                _a = __read(parts, 2), chain = _a[0], symbol = _a[1];
            }
            else {
                _b = __read(parts, 1), symbol = _b[0];
                chain = "THOR";
            }
            var _e = __read(symbol.split('-'), 1), ticker = _e[0];
            return {
                from: msg.value.signer,
                msg: {
                    typeUrl: '/types.MsgDeposit',
                    value: {
                        coins: [
                            {
                                asset: {
                                    chain: chain,
                                    symbol: symbol,
                                    ticker: ticker,
                                    synth: false
                                },
                                amount: inCoin.amount
                            }
                        ],
                        memo: msg.value.memo,
                        signer: (0, utils_1.toAccAddress)(msg.value.signer)
                    }
                }
            };
        case 'cosmos-sdk/MsgSend':
            if (!msg.value.from_address)
                throw new Error('Missing from_address in msg');
            if (!msg.value.to_address)
                throw new Error('Missing to_address in msg');
            return {
                from: msg.value.from_address,
                msg: {
                    typeUrl: '/cosmos.bank.v1beta1.MsgSend',
                    value: {
                        fromAddress: msg.value.from_address,
                        toAddress: msg.value.to_address,
                        amount: scrubCoins(msg.value.amount)
                    }
                }
            };
        case 'cosmos-sdk/MsgDelegate':
            if (!msg.value.delegator_address)
                throw new Error('Missing delegator_address in msg');
            if (!msg.value.validator_address)
                throw new Error('Missing validator_address in msg');
            return {
                from: msg.value.delegator_address,
                msg: {
                    typeUrl: '/cosmos.staking.v1beta1.MsgDelegate',
                    value: {
                        delegatorAddress: msg.value.delegator_address,
                        validatorAddress: msg.value.validator_address,
                        amount: scrubCoin(msg.value.amount)
                    }
                }
            };
        case 'cosmos-sdk/MsgUndelegate':
            if (!msg.value.delegator_address)
                throw new Error('Missing delegator_address in msg');
            if (!msg.value.validator_address)
                throw new Error('Missing validator_address in msg');
            return {
                from: msg.value.delegator_address,
                msg: {
                    typeUrl: '/cosmos.staking.v1beta1.MsgUndelegate',
                    value: {
                        delegatorAddress: msg.value.delegator_address,
                        validatorAddress: msg.value.validator_address,
                        amount: scrubCoin(msg.value.amount)
                    }
                }
            };
        case 'cosmos-sdk/MsgBeginRedelegate':
            if (!msg.value.delegator_address)
                throw new Error('Missing delegator_address in msg');
            if (!msg.value.validator_src_address)
                throw new Error('Missing validator_src_address in msg');
            if (!msg.value.validator_dst_address)
                throw new Error('Missing validator_dst_address in msg');
            return {
                from: msg.value.delegator_address,
                msg: {
                    typeUrl: '/cosmos.staking.v1beta1.MsgBeginRedelegate',
                    value: {
                        delegatorAddress: msg.value.delegator_address,
                        validatorSrcAddress: msg.value.validator_src_address,
                        validatorDstAddress: msg.value.validator_dst_address,
                        amount: scrubCoin(msg.value.amount)
                    }
                }
            };
        case 'cosmos-sdk/MsgWithdrawDelegationReward':
            if (!msg.value.delegator_address)
                throw new Error('Missing delegator_address in msg');
            if (!msg.value.validator_address)
                throw new Error('Missing validator_address in msg');
            return {
                from: msg.value.delegator_address,
                msg: {
                    typeUrl: '/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward',
                    value: {
                        delegatorAddress: msg.value.delegator_address,
                        validatorAddress: msg.value.validator_address,
                        amount: msg.value.amount ? scrubCoin(msg.value.amount) : undefined
                    }
                }
            };
        case 'cosmos-sdk/MsgTransfer':
            if (!msg.value.receiver)
                throw new Error('Missing receiver in msg');
            if (!msg.value.sender)
                throw new Error('Missing sender in msg');
            if (!msg.value.source_channel)
                throw new Error('Missing source_channel in msg');
            if (!msg.value.source_port)
                throw new Error('Missing source_port in msg');
            if (!msg.value.timeout_height.revision_height)
                throw new Error('Missing revision_height in msg value.timeout_height');
            return {
                from: msg.value.sender,
                msg: {
                    typeUrl: '/ibc.applications.transfer.v1.MsgTransfer',
                    value: {
                        receiver: msg.value.receiver,
                        sender: msg.value.sender,
                        sourceChannel: msg.value.source_channel,
                        sourcePort: msg.value.source_port,
                        token: scrubCoin(msg.value.token),
                        timeoutHeight: {
                            revisionHeight: msg.value.timeout_height.revision_height,
                            revisionNumber: msg.value.timeout_height.revision_number
                        },
                        timeoutTimestamp: "0"
                    }
                }
            };
        case 'osmosis/gamm/swap-exact-amount-in':
            if (!msg.value.sender)
                throw new Error('Missing sender in msg');
            if (!msg.value.tokenIn)
                throw new Error('Missing tokenIn in msg');
            if (!msg.value.tokenOutMinAmount)
                throw new Error('Missing tokenOutMinAmount in msg');
            if (msg.value.routes.length !== 1)
                throw new Error('bad routes length');
            return {
                from: msg.value.sender,
                msg: {
                    typeUrl: '/osmosis.gamm.v1beta1.MsgSwapExactAmountIn',
                    value: {
                        sender: msg.value.sender,
                        tokenIn: scrubCoin(msg.value.tokenIn),
                        tokenOutMinAmount: msg.value.tokenOutMinAmount,
                        routes: scrubRoutes(msg.value.routes)
                    }
                }
            };
        case 'osmosis/gamm/join-pool':
            if (!msg.value.sender)
                throw new Error('Missing sender in msg');
            if (!msg.value.poolId)
                throw new Error('Missing poolId in msg');
            if (!msg.value.shareOutAmount)
                throw new Error('Missing poolId in msg');
            if (msg.value.tokenInMaxs.length !== 2)
                throw new Error('bad tokenInMaxs length');
            return {
                from: msg.value.sender,
                msg: {
                    typeUrl: '/osmosis.gamm.v1beta1.MsgJoinPool',
                    value: {
                        sender: msg.value.sender,
                        poolId: msg.value.poolId,
                        shareOutAmount: msg.value.shareOutAmount,
                        tokenInMaxs: scrubCoins(msg.value.tokenInMaxs)
                    }
                }
            };
        case 'osmosis/gamm/exit-pool':
            if (!msg.value.sender)
                throw new Error('Missing sender in msg');
            if (!msg.value.poolId)
                throw new Error('Missing poolId in msg');
            if (!msg.value.shareOutAmount)
                throw new Error('Missing poolId in msg');
            if (msg.value.tokenOutMins.length !== 2)
                throw new Error('bad tokenOutMins length');
            return {
                from: msg.value.sender,
                msg: {
                    typeUrl: '/osmosis.gamm.v1beta1.MsgExitPool',
                    value: {
                        sender: msg.value.sender,
                        poolId: msg.value.poolId,
                        shareInAmount: msg.value.shareOutAmount,
                        tokenOutMins: scrubCoins(msg.value.tokenOutMins)
                    }
                }
            };
        case 'osmosis/lockup/lock-tokens':
            if (!msg.value.owner)
                throw new Error('Missing owner in msg');
            if (!msg.value.duration)
                throw new Error('Missing duration in msg');
            return {
                from: msg.value.owner,
                msg: {
                    typeUrl: '/osmosis.lockup.MsgLockTokens',
                    value: {
                        owner: msg.value.owner,
                        duration: msg.value.poolId,
                        coins: scrubCoins(msg.value.coins)
                    }
                }
            };
        case 'osmosis/lockup/begin-unlock-period-lock':
            if (!msg.value.owner)
                throw new Error('Missing owner in msg');
            return {
                from: msg.value.owner,
                msg: {
                    typeUrl: '/osmosis.lockup.MsgBeginUnlockingAll',
                    value: {
                        owner: msg.value.owner
                    }
                }
            };
        default:
            throw new Error('Unhandled tx type! type: ' + msg.type);
    }
}
