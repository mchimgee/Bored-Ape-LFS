"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransportDelegate = void 0;
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const keepkey = __importStar(require("@shapeshiftoss/hdwallet-keepkey"));
const utils_1 = require("./utils");
class TransportDelegate {
    constructor(usbDevice) {
        if (usbDevice.vendorId !== utils_1.VENDOR_ID)
            throw new core.WebUSBCouldNotPair("KeepKey", "bad vendor id");
        if (usbDevice.productId !== utils_1.WEBUSB_PRODUCT_ID)
            throw new core.FirmwareUpdateRequired("KeepKey", "6.1.0");
        this.usbDevice = usbDevice;
    }
    static create(device) {
        return __awaiter(this, void 0, void 0, function* () {
            if (device.vendorId !== utils_1.VENDOR_ID)
                return null;
            return new TransportDelegate(device);
        });
    }
    getDeviceID() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.usbDevice.serialNumber;
        });
    }
    isOpened() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.usbDevice.opened;
        });
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.usbDevice.open();
            if (this.usbDevice.configuration === null)
                yield this.usbDevice.selectConfiguration(1);
            try {
                yield this.usbDevice.claimInterface(0);
            }
            catch (e) {
                console.error("Could not claim interface 0", this.usbDevice, { e });
                if (core.isIndexable(e) && e.code === 18)
                    // "The requested interface implements a protected class"
                    throw new core.FirmwareUpdateRequired("KeepKey", "6.1.0");
                if (core.isIndexable(e) && e.code === 19)
                    // "Unable to claim interface"
                    throw new core.ConflictingApp("KeepKey");
                throw e;
            }
        });
    }
    tryConnectDebugLink() {
        return __awaiter(this, void 0, void 0, function* () {
            // We have to use "guess & check" here because the browser doesn't give us a
            // way to inspect the descriptors :(
            try {
                yield this.usbDevice.claimInterface(1);
                return true;
            }
            catch (e) {
                return false;
            }
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.usbDevice.opened)
                return;
            try {
                // If the device is disconnected, this will fail and throw, which is fine.
                yield this.usbDevice.close();
            }
            catch (e) {
                console.warn("Error closing connection with usbDevice");
            }
        });
    }
    writeChunk(buf, debugLink) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.usbDevice.transferOut(debugLink ? 2 : 1, buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength));
        });
    }
    readChunk(debugLink) {
        return __awaiter(this, void 0, void 0, function* () {
            const { status, data } = yield this.usbDevice.transferIn(debugLink ? 2 : 1, keepkey.SEGMENT_SIZE + 1);
            if (status === "stall") {
                yield this.usbDevice.clearHalt("out", debugLink ? 2 : 1);
            }
            if (data === undefined)
                throw new Error("bad read");
            return new Uint8Array(core.toArrayBuffer(data));
        });
    }
}
exports.TransportDelegate = TransportDelegate;
//# sourceMappingURL=transport.js.map