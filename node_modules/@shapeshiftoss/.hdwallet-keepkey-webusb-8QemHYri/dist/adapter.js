"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebUSBKeepKeyAdapter = exports.Adapter = exports.AdapterDelegate = void 0;
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const keepkey = __importStar(require("@shapeshiftoss/hdwallet-keepkey"));
const transport_1 = require("./transport");
const utils_1 = require("./utils");
// This avoids a prompt ReferenceError if the module is imported outside a browser.
const webUSB = typeof window === "object" && ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.usb);
function assertWebUSB(x) {
    if (!x)
        throw new core.WebUSBNotAvailable();
}
exports.AdapterDelegate = {
    getDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            assertWebUSB(webUSB);
            const devices = (yield webUSB.getDevices()).filter((d) => d.serialNumber !== undefined);
            return devices.filter((x) => x.vendorId === utils_1.VENDOR_ID && [utils_1.WEBUSB_PRODUCT_ID, utils_1.HID_PRODUCT_ID].includes(x.productId));
        });
    },
    getDevice(serialNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            assertWebUSB(webUSB);
            try {
                const out = yield webUSB.requestDevice({
                    filters: [
                        { vendorId: utils_1.VENDOR_ID, productId: utils_1.WEBUSB_PRODUCT_ID, serialNumber },
                        { vendorId: utils_1.VENDOR_ID, productId: utils_1.HID_PRODUCT_ID, serialNumber },
                    ],
                });
                if (out.serialNumber === undefined)
                    throw new Error("expected serial number");
                return out;
            }
            catch (e) {
                throw new core.WebUSBCouldNotPair("KeepKey", String(core.isIndexable(e) ? e.message : e));
            }
        });
    },
    getTransportDelegate(device) {
        return __awaiter(this, void 0, void 0, function* () {
            return new transport_1.TransportDelegate(device);
        });
    },
    registerCallbacks(handleConnect, handleDisconnect) {
        assertWebUSB(webUSB);
        function handleUSBEvent(connecting, e) {
            return __awaiter(this, void 0, void 0, function* () {
                const device = e.device;
                if (device.vendorId !== utils_1.VENDOR_ID)
                    return;
                if (device.productId !== utils_1.WEBUSB_PRODUCT_ID)
                    return;
                return (connecting ? handleConnect : handleDisconnect)(device);
            });
        }
        webUSB.addEventListener("connect", handleUSBEvent.bind(null, true));
        webUSB.addEventListener("disconnect", handleUSBEvent.bind(null, false));
    },
};
exports.Adapter = keepkey.Adapter.fromDelegate(exports.AdapterDelegate);
exports.WebUSBKeepKeyAdapter = exports.Adapter;
//# sourceMappingURL=adapter.js.map