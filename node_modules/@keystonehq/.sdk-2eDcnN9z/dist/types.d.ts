import { UR } from '@ngraveio/bc-ur';
declare type DecodedSuccess = {
    result: UR;
    status: ReadStatus.success;
};
declare type DecodedCanceled = {
    status: ReadStatus.canceled;
};
export declare type DecodedResult = DecodedSuccess | DecodedCanceled;
export declare enum ReadStatus {
    canceled = "canceled",
    success = "success"
}
export declare enum PlayStatus {
    canceled = "canceled",
    success = "success"
}
export declare type Play = (data: UR, options?: {
    refreshSpeed?: number;
    hasNext?: boolean;
    title?: string;
    description?: string;
}) => Promise<PlayStatus>;
export declare type Read = (expect: SupportedResult[], options?: {
    title?: string;
    description?: string;
    renderInitial?: {
        walletMode: string;
        link: string;
    };
    URTypeErrorMessage?: string;
}) => Promise<DecodedResult>;
export declare enum SupportedResult {
    UR_BYTES = "bytes",
    UR_CRYPTO_HDKEY = "crypto-hdkey",
    UR_ETH_SIGN_REQUEST = "eth-sign-request",
    UR_ETH_SIGNATURE = "eth-signature"
}
export {};
