/// <reference types="node" />
import HDKey from 'hdkey';
import { Transaction } from '@ethereumjs/tx';
import { EthSignRequest } from '@keystonehq/bc-ur-registry-eth';
import { InteractionProvider } from './InteractionProvider';
export declare type StoredKeyring = {
    xfp: string;
    xpub: string;
    hdPath: string;
    accounts: string[];
    currentAccount: number;
    page: number;
    perPage: number;
    paths: Record<string, number>;
};
export declare type PagedAccount = {
    address: string;
    balance: any;
    index: number;
};
export declare class BaseKeyring {
    getInteraction: () => InteractionProvider;
    static type: string;
    protected xfp: string;
    protected type: string;
    protected xpub: string;
    protected hdPath: string;
    protected accounts: string[];
    protected currentAccount: number;
    protected page: number;
    protected perPage: number;
    protected paths: Record<string, number>;
    protected hdk: HDKey;
    protected latestAccount: number;
    constructor(opts?: StoredKeyring);
    private readKeyringCryptoHDKey;
    protected requestSignature: (_requestId: string, signRequest: EthSignRequest, requestTitle?: string, requestDescription?: string) => Promise<{
        r: Buffer;
        s: Buffer;
        v: Buffer;
    }>;
    readKeyring(): Promise<void>;
    protected checkKeyring(): void;
    serialize(): Promise<StoredKeyring>;
    deserialize(opts?: StoredKeyring): void;
    setCurrentAccount(index: number): void;
    getCurrentAccount(): number;
    getCurrentAddress(): string;
    addAccounts(n?: number): Promise<string[]>;
    getFirstPage(): Promise<PagedAccount[]>;
    getNextPage(): Promise<PagedAccount[]>;
    getPreviousPage(): Promise<PagedAccount[]>;
    __getPage(increment: number): Promise<PagedAccount[]>;
    getAccounts(): Promise<string[]>;
    removeAccount(address: string): void;
    private static serializeTx;
    signTransaction(address: string, tx: Transaction): Promise<Transaction>;
    signMessage(withAccount: string, data: string): Promise<string>;
    signPersonalMessage(withAccount: string, messageHex: string): Promise<string>;
    signTypedData(withAccount: string, typedData: any): Promise<string>;
    _addressFromIndex(pb: string, i: number): string;
    _pathFromAddress(address: string): string;
}
