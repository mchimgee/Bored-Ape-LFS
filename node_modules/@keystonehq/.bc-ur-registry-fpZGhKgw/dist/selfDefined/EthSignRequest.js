"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthSignRequest = exports.DataType = void 0;
const CryptoKeypath_1 = require("../CryptoKeypath");
const cbor_sync_1 = require("../lib/cbor-sync");
const DataItem_1 = require("../lib/DataItem");
const RegistryItem_1 = require("../RegistryItem");
const RegistryType_1 = require("../RegistryType");
var Keys;
(function (Keys) {
    Keys[Keys["requestId"] = 1] = "requestId";
    Keys[Keys["signData"] = 2] = "signData";
    Keys[Keys["dataType"] = 3] = "dataType";
    Keys[Keys["chainId"] = 4] = "chainId";
    Keys[Keys["derivationPath"] = 5] = "derivationPath";
    Keys[Keys["address"] = 6] = "address";
})(Keys || (Keys = {}));
var DataType;
(function (DataType) {
    DataType[DataType["transaction"] = 1] = "transaction";
    DataType[DataType["typedData"] = 2] = "typedData";
    DataType[DataType["rawHex"] = 3] = "rawHex";
})(DataType = exports.DataType || (exports.DataType = {}));
class EthSignRequest extends RegistryItem_1.RegistryItem {
    constructor(args) {
        super();
        this.args = args;
        this.getRegistryType = () => RegistryType_1.RegistryTypes.ETH_SIGN_REQUEST;
        this.setupData = (args) => {
            this.requestId = args.requestId;
            this.signData = args.signData;
            this.dataType = args.dataType;
            this.chainId = args.chainId;
            this.derivationPath = args.derivationPath;
            this.address = args.address;
        };
        this.getRequestId = () => this.requestId;
        this.getSignData = () => this.signData;
        this.getDataType = () => this.dataType;
        this.getChainId = () => this.chainId;
        this.getDerivationPath = () => this.derivationPath.getPath();
        this.getSignRequestAddress = () => this.address;
        this.toDataItem = () => {
            const map = {};
            if (this.requestId) {
                map[Keys.requestId] = new DataItem_1.DataItem(this.requestId, RegistryType_1.RegistryTypes.UUID.getTag());
            }
            if (this.address) {
                map[Keys.address] = this.address;
            }
            map[Keys.signData] = this.signData;
            map[Keys.dataType] = this.dataType;
            map[Keys.chainId] = this.chainId;
            const keyPath = this.derivationPath.toDataItem();
            keyPath.setTag(this.derivationPath.getRegistryType().getTag());
            map[Keys.derivationPath] = keyPath;
            return new DataItem_1.DataItem(map);
        };
        this.setupData(args);
    }
}
exports.EthSignRequest = EthSignRequest;
EthSignRequest.fromDataItem = (dataItem) => {
    const map = dataItem.getData();
    const signData = map[Keys.signData];
    const dataType = map[Keys.dataType];
    const chainId = map[Keys.chainId];
    const derivationPath = CryptoKeypath_1.CryptoKeypath.fromDataItem(map[Keys.derivationPath]);
    const address = map[Keys.address] ? map[Keys.address] : undefined;
    const requestId = map[Keys.requestId] ? map[Keys.requestId].getData() : undefined;
    return new EthSignRequest({
        requestId,
        signData,
        dataType,
        chainId,
        derivationPath,
        address
    });
};
EthSignRequest.fromCBOR = (_cborPayload) => {
    const dataItem = cbor_sync_1.decodeToDataItem(_cborPayload);
    return EthSignRequest.fromDataItem(dataItem);
};
//# sourceMappingURL=EthSignRequest.js.map